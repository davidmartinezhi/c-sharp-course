
Access mofifiers

this helps with encapsulatoin and helps with data integrity by only changing it through certain ways
it applies abstraction hides internal implementation and reduce complecity

    private: only class can access that data
    public: anyone can access it
    protected: only the own class and its children can access it



we can define read only and write only properties
read only has only get accessor
write nnly has only set accessor

Readonly aplica para inmutable data como cumpleaños o computed data

write only puede ser para sensitive data que debe ingresarse pero no aparecer en la aplicación

===========
Inheritance
    -Define a class in terms of other class
    -take functinoality from one class and construct from it

===========
Interface
    -Is like a contract, a class that implements an interface agrees to define implementation for all things defined by the interface
    - contract terms methods and properties, implementation depends on the classes

Interfaces are of good use when inheritance doe not apply and you want to mantain certain functionalities
    -csharp is single inheritance language
    - for interfaces, they start with I , ex. IDestroyor IDog

    Interfaces contitutes declareation of intentions, what your class will be able to do
    it helps with
        _ code readability
        - code semantics, separating concepts
        - code maintainability. reduce coupling, and helps interchange implementations for the same concept
        - design patterns, bigger picture of abstraction, complex system architecture and human comprensitvity
        - multi inheritance, gateway to multiple inheritance.



    for example if different objects need to get destroyed in a game, even if they are not related
    So we have interface destroy that helps us dont miss this functionality on any of those objects
    