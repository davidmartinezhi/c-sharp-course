
Data Types
int
    - sbyte -127 a 128
    - short -32k a 32k
    - int -2b a 2b
    - long -9,000,000,000,000,000,000 a 9,000,000,000,000,000,000

    use the smallest data type your value fits in

float
    - float add f at the end 1.99f. 7 digit precision (high demands for processing power)
    - double 15 digit precision (except money calculations, there we use decimal)
    - decimal 28 digit precision (high level of accuracy)

bool
    
char
    - contains a single letter or unicode

string
    - allows multiple letters and unicodes

They are usually saved in the stack (RAM)
They can be stored in the heap if they are part of reference type (field in class or element in array,strings)
reference stores where it is saved. reference is smaller in bites required
An object could be reeally big and require a lot of memory, reference makes it more performant

XML Documentation comments
///<summary>
//This method is very cool
///</summary>
**method**

Console Methods
write() prints and keep cursor on the same line. to see outputs
writeline() prints and moves cursor to the next line
read() takes input and returns ascii value of that input
readline() takes integer or string and returns it as output
readkey() takes string and returns the key info


Classes start with capital letter and are camel cased
Method names have the same approach

Arguments have camel casing
same for variables, avoid abreviations

    No numbers at the start of variables, try to avoid underscore
    underscore at the beginning is okay

Use nouns to name classes
    Methods are actions


=====
var is used for implicit typed variables
ex: var number = 1; they must be assigned and cannot be overwritten with other data types, they cannot be null neither


=====
Generic and non-generic collections
Classes we can use to store collection of objects, they are not fixed in size. instead of length we use count

Non generic
    Can store any type of objects
    Are in System.Collections namespace

    - ArrayList
        ex. ArrayList ex = new ArrayList();
            ex.Add(1);
            x.Add("hey");
        we use foreach when traversing

    - Hashtable

Generic
    Limited to one type of objects
    Are in System.Collections.Generic namespace

    - List
        ex. List<string> myList = new List<string>();

    - Dictionary


    - Stack
        push
        pop
        peek

    - Queue
        enqueue, add data to queue
        deque, remove data from front
        peek, see data at front


====
NULLABLES. values that can have a value or can not have a value
Nullable<Int32>
int? num1 = null;
double? d = new Double?();

we have to cast when assigning a value that is nullable int? to non nullable int
num8 = this nullable value ?? this fallback value

====

Garbage collector limpia la memoria que queda siendo utilizada pero ya no es referenciada.
Esto podría ser por cambiar variable de referencia a null